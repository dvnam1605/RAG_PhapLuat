import streamlit as st
import os
from dotenv import load_dotenv
from qabot import rag_with_query_transformation

# Load environment variables
load_dotenv()

# Set page configuration
st.set_page_config(
    page_title="H·ªá th·ªëng RAG Ph√°p Lu·∫≠t",
    page_icon="‚öñÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better appearance
st.markdown("""
    <style>
    .main {
        background-color: #f8f9fa;
    }
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
    }
    .result-container {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    .context-container {
        max-height: 400px;
        overflow-y: auto;
        background-color: #f1f3f4;
        padding: 15px;
        border-radius: 8px;
        margin-top: 10px;
        font-size: 0.9em;
    }
    .query-transform-info {
        background-color: #e8f4f8;
        padding: 10px;
        border-radius: 8px;
        margin-top: 10px;
    }
    h1 {
        color: #0d47a1;
    }
    h3 {
        color: #1976d2;
    }
    </style>
    """, unsafe_allow_html=True)

def main():
    st.title("‚öñÔ∏è H·ªá th·ªëng RAG Ph√°p Lu·∫≠t")
    
    # Sidebar for app configuration
    with st.sidebar:
        st.header("C·∫•u h√¨nh h·ªá th·ªëng")
        
        # Choose query transformation type
        st.subheader("Ch·ªçn ph∆∞∆°ng ph√°p bi·∫øn ƒë·ªïi truy v·∫•n")
        transformation_option = st.radio(
            "Ph∆∞∆°ng ph√°p bi·∫øn ƒë·ªïi:",
            ["Kh√¥ng bi·∫øn ƒë·ªïi", "Vi·∫øt l·∫°i truy v·∫•n (Rewrite)", "M·ªü r·ªông truy v·∫•n (Step Back)", "Ph√¢n t√°ch truy v·∫•n (Decompose)"],
            index=0
        )
        
        # Map radio button options to transformation types
        transformation_map = {
            "Kh√¥ng bi·∫øn ƒë·ªïi": None,
            "Vi·∫øt l·∫°i truy v·∫•n (Rewrite)": "rewrite",
            "M·ªü r·ªông truy v·∫•n (Step Back)": "step_back",
            "Ph√¢n t√°ch truy v·∫•n (Decompose)": "decompose"
        }
        
        transformation_type = transformation_map[transformation_option]
        
        # Information about each transformation method
        if transformation_type:
            st.info(
                {
                    "rewrite": "Vi·∫øt l·∫°i truy v·∫•n ƒë·ªÉ l√†m r√µ v√† c·ª• th·ªÉ h√≥a n·ªôi dung ph√°p l√Ω.",
                    "step_back": "M·ªü r·ªông truy v·∫•n ƒë·ªÉ bao qu√°t c√°c kh√≠a c·∫°nh ph√°p l√Ω li√™n quan.",
                    "decompose": "Ph√¢n t√°ch truy v·∫•n ph·ª©c t·∫°p th√†nh c√°c truy v·∫•n ƒë∆°n gi·∫£n h∆°n."
                }[transformation_type]
            )
        
        st.divider()
        st.markdown("### Gi·ªõi thi·ªáu")
        st.markdown("""
        H·ªá th·ªëng truy xu·∫•t th√¥ng tin ph√°p l√Ω s·ª≠ d·ª•ng c√¥ng ngh·ªá RAG (Retrieval-Augmented Generation) 
        gi√∫p t√¨m ki·∫øm v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n vƒÉn b·∫£n ph√°p lu·∫≠t Vi·ªát Nam.
        """)
    
    # Main content area
    st.header("Tra c·ª©u th√¥ng tin ph√°p lu·∫≠t")
    
    # Query input
    query = st.text_area("Nh·∫≠p c√¢u h·ªèi ph√°p l√Ω c·ªßa b·∫°n:", height=100)
    
    col1, col2 = st.columns([1, 5])
    with col1:
        search_button = st.button("üîç G·ª≠i", type="primary", use_container_width=True)
    
    # Process the query when the button is clicked
    if search_button and query:
        with st.spinner('ƒêang x·ª≠ l√Ω truy v·∫•n...'):
            try:
                # Call the RAG function with the query and transformation type
                result = rag_with_query_transformation(query, transformation_type)
                
                # Display the result
                st.markdown("### K·∫øt qu·∫£")
                
                # Output original and transformed queries if applicable
                if transformation_type:
                    with st.expander("Th√¥ng tin v·ªÅ bi·∫øn ƒë·ªïi truy v·∫•n", expanded=False):
                        st.markdown(f"**Truy v·∫•n g·ªëc:** {result['C√¢u h·ªèi g·ªëc']}")
                        st.markdown(f"**Ph∆∞∆°ng ph√°p bi·∫øn ƒë·ªïi:** {transformation_option}")
                
                # Display the answer
                st.markdown("### Tr·∫£ l·ªùi")
                st.markdown(f"{result['Tr·∫£ l·ªùi']}")
                
                # Show the context in an expander
                with st.expander("Xem c√°c vƒÉn b·∫£n ph√°p lu·∫≠t li√™n quan", expanded=False):
                    st.markdown("### Ng·ªØ c·∫£nh t·ª´ vƒÉn b·∫£n ph√°p lu·∫≠t")
                    st.markdown(f"<div class='context-container'>{result['Ng·ªØ c·∫£nh'].replace('\n', '<br>')}</div>", 
                                unsafe_allow_html=True)
                
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
    elif search_button:
        st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi ƒë·ªÉ t√¨m ki·∫øm.")
    
    # Footer
    st.markdown("---")
    st.markdown("<div style='text-align: center; color: gray; font-size: 0.8em;'>H·ªá th·ªëng RAG Ph√°p Lu·∫≠t ¬© 2025</div>", 
                unsafe_allow_html=True)

if __name__ == "__main__":
    main()